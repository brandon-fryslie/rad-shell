#!/usr/bin/env ruby
require_relative 'git-cmd-base'

def get_status_string(repo_path)
  git_cmd = "git -C #{repo_path}"

  # check the status to flush a cache somewhere
  `#{git_cmd} status &>/dev/null`

  branch = `#{git_cmd} symbolic-ref -q --short HEAD`.strip

  # look for tag
  branch.length == 0 ? tag = `#{git_cmd} describe --tags --exact-match 2>/dev/null`.strip : ''
  branch = (branch.length == 0 && tag.length > 0) ? "#{'tag:'.red} #{tag.green}" : branch
  branch = (branch.length == 0) ? `#{git_cmd} rev-parse --short HEAD`.strip.red : branch # get sha of head if detached

  remote = `#{git_cmd} rev-parse --verify #{branch}@{upstream} --symbolic-full-name --abbrev-ref 2>/dev/null`.strip

  # Repo has staged/unstaged changes
  staged = `#{git_cmd} diff-index --cached HEAD --ignore-submodules -- 2>/dev/null`.strip.length > 0 ? 'S'.bold.green : ''
  unstaged = `#{git_cmd} diff-files --ignore-submodules -- 2>/dev/null`.strip.length > 0 ? 'U'.bold.red : ''
  staged_unstaged = (staged.length > 0 || unstaged.length > 0) ? " #{staged}#{unstaged} " : ''

  # current branch + remote tracking if any
  branch_info = branch.green + (remote.length > 0 ? " -> #{remote.yellow}" : '')

  # Get commits ahead/behind remote
  ahead = behind = 0
  if remote
    ahead = `#{git_cmd} rev-list #{branch}@{upstream}..HEAD 2>/dev/null | wc -l`.strip
    behind = `#{git_cmd} rev-list HEAD..#{branch}@{upstream} 2>/dev/null | wc -l`.strip
  end
  has_ahead = Integer(ahead) > 0
  has_behind = Integer(behind) > 0
  ahead_behind_counter = (has_ahead && has_behind ? " (#{'+'.green + ahead.green}/#{'-'.red + behind.red})" : '') +
    (has_ahead && !has_behind ? " (#{'+'.green + ahead.green})" : '') +
    (has_behind && !has_ahead ? " (#{'-'.red + behind.red})" : '')

  "#{File.basename(repo_path)} #{staged_unstaged}[#{branch_info}]#{ahead_behind_counter}"
end

REPO_PATHS.map do |repo_path|
  Thread.new { get_status_string repo_path }
end.map { |t| puts t.value }
